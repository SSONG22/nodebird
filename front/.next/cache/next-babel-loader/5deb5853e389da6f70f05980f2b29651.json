{"ast":null,"code":"/* eslint-disable no-case-declarations */\nimport shortId from \"shortid\";\nimport produce from \"immer\";\nimport faker from \"faker\";\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: \"체리슈\"\n    },\n    content: \"첫번째 게시글 #해시태그 ##태그당 #ㅎㅇ\",\n    Images: [{\n      id: shortId.generate(),\n      src: \"https://cgeimage.commutil.kr/phpwas/restmb_allidxmake.php?idx=3&simg=2019043021255500507482b2d760618310114012.jpg\"\n    }, {\n      id: shortId.generate(),\n      src: \"http://ph.spotvnews.co.kr/news/photo/202001/338010_421317_1105.jpg\"\n    }, {\n      id: shortId.generate(),\n      src: \"http://ph.spotvnews.co.kr/news/photo/202001/338010_421317_1105.jpg\"\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: \"nero\"\n      },\n      content: \"잘생겼다\"\n    }] //sequelize 와 연관되어 있기 때문에 (다른정보와 합쳐줘서 대문자로 줌)\n\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null\n};\nexport const generateDummyPost = number => Array(number).fill().map(() => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image()\n  }],\n  Comments: [{\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n}));\ninitialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10)); // action //상수로 빼주면 재활용할 수 있다.\n\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const addPost = data => {\n  return {\n    type: ADD_POST_REQUEST,\n    data\n  };\n};\nexport const addComment = data => {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data\n  };\n}; // 동적인 액션이 필요할 때 액션 크리에이터 함수를 쓴다\n\nconst dummyPost = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"chee99\"\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"chee99\"\n  }\n}); //이전 상태를 액션을 통해 다음 상태로 만들어내는 함수 (불변성은 지키면서)\n\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.addPostError = null;\n      draft.mainPosts.unshift([dummyPost(action.data), ...state.mainPosts]);\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.addPostError = action.data;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      draft.removePostError = null;\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      draft.removePostError = action.data;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        draft.addCommentError = null;\n        const post = draft.mainPosts.find(v => v.id === action.data.postId);\n        post.Comments.unshift(dummyComment(action.data.content));\n        break;\n      }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentDone = true;\n      draft.addCommentError = action.data;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["/Users/songi/Documents/nodebird/front/reducers/post.js"],"names":["shortId","produce","faker","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","generateDummyPost","number","Array","fill","map","name","findName","lorem","paragraph","image","sentence","concat","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","unshift","filter","v","post","find","postId"],"mappings":"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","sourcesContent":["/* eslint-disable no-case-declarations */\nimport shortId from \"shortid\";\nimport produce from \"immer\";\nimport faker from \"faker\";\n\nexport const initialState = {\n  mainPosts: [\n    {\n      id: 1,\n      User: {\n        id: 1,\n        nickname: \"체리슈\",\n      },\n      content: \"첫번째 게시글 #해시태그 ##태그당 #ㅎㅇ\",\n      Images: [\n        {\n          id: shortId.generate(),\n          src:\n            \"https://cgeimage.commutil.kr/phpwas/restmb_allidxmake.php?idx=3&simg=2019043021255500507482b2d760618310114012.jpg\",\n        },\n        {\n          id: shortId.generate(),\n          src:\n            \"http://ph.spotvnews.co.kr/news/photo/202001/338010_421317_1105.jpg\",\n        },\n        {\n          id: shortId.generate(),\n          src:\n            \"http://ph.spotvnews.co.kr/news/photo/202001/338010_421317_1105.jpg\",\n        },\n      ],\n      Comments: [\n        {\n          id: shortId.generate(),\n          User: {\n            id: shortId.generate(),\n            nickname: \"nero\",\n          },\n          content: \"잘생겼다\",\n        },\n      ], //sequelize 와 연관되어 있기 때문에 (다른정보와 합쳐줘서 대문자로 줌)\n    },\n  ],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n};\nexport const generateDummyPost = (number) =>\n  Array(number)\n    .fill()\n    .map(() => ({\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName(),\n      },\n      content: faker.lorem.paragraph(),\n      Images: [\n        {\n          src: faker.image.image(),\n        },\n      ],\n      Comments: [\n        {\n          User: {\n            id: shortId.generate(),\n            nickname: faker.name.findName(),\n          },\n          content: faker.lorem.sentence(),\n        },\n      ],\n    }));\n\ninitialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\n\n// action //상수로 빼주면 재활용할 수 있다.\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\n\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\n\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\n\nexport const addPost = (data) => {\n  return {\n    type: ADD_POST_REQUEST,\n    data,\n  };\n};\nexport const addComment = (data) => {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data,\n  };\n};\n// 동적인 액션이 필요할 때 액션 크리에이터 함수를 쓴다\nconst dummyPost = (data) => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"chee99\",\n  },\n  Images: [],\n  Comments: [],\n});\nconst dummyComment = (data) => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"chee99\",\n  },\n});\n//이전 상태를 액션을 통해 다음 상태로 만들어내는 함수 (불변성은 지키면서)\nconst reducer = (state = initialState, action) =>\n  produce(state, (draft) => {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.addPostError = null;\n        draft.mainPosts.unshift([dummyPost(action.data), ...state.mainPosts]);\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.addPostError = action.data;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.removePostError = null;\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.removePostError = action.data;\n        break;\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS: {\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        draft.addCommentError = null;\n        const post = draft.mainPosts.find((v) => v.id === action.data.postId);\n        post.Comments.unshift(dummyComment(action.data.content));\n        break;\n      }\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        draft.addCommentError = action.data;\n        break;\n      default:\n        break;\n    }\n  });\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}