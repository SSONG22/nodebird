{"ast":null,"code":"/* eslint-disable no-unused-vars */\nimport { all, takeLatest, put, delay, fork, call, throttle } from \"redux-saga/effects\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, generateDummyPost } from \"../reducers/post\";\nimport axios from \"axios\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport shortid from \"shortid\";\n\nfunction loadPostAPI(data) {\n  return axios.get(\"/api/post\", data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(loadPostAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (error) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: error.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction addPostAPI(data) {\n  return axios.post(\"http://localhost:3065/post\", {\n    content: data\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* addPost(action) {\n  console.log(\"addpost\");\n\n  try {\n    const result = yield call(addPostAPI, action.data);\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data\n    }); // const result = yield call(addPostAPI, action.data);\n\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction removePostAPI() {\n  return axios.post(\"/api/post\");\n}\n\nfunction* removePost(action) {\n  console.log(\"addpost\");\n\n  try {\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    }); // const result = yield call(addPostAPI, action.data);\n\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction addCommentAPI(data) {\n  //POST /post/1/comment\n  return axios.post(`http://localhost:3065/post/${data.postId}/comment`, data, {\n    withCredentials: true\n  });\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchLoadPosts)]);\n}","map":{"version":3,"sources":["/Users/songi/Documents/nodebird/front/sagas/post.js"],"names":["all","takeLatest","put","delay","fork","call","throttle","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","generateDummyPost","axios","ADD_POST_TO_ME","REMOVE_POST_OF_ME","shortid","loadPostAPI","data","get","loadPosts","action","type","error","response","watchLoadPosts","addPostAPI","post","content","withCredentials","addPost","console","log","result","id","generate","err","watchAddPost","removePostAPI","removePost","watchRemovePost","addCommentAPI","postId","addComment","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\nimport {\n  all,\n  takeLatest,\n  put,\n  delay,\n  fork,\n  call,\n  throttle,\n} from \"redux-saga/effects\";\nimport {\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_COMMENT_FAILURE,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n  REMOVE_POST_FAILURE,\n  LOAD_POSTS_REQUEST,\n  LOAD_POSTS_SUCCESS,\n  LOAD_POSTS_FAILURE,\n  generateDummyPost,\n} from \"../reducers/post\";\nimport axios from \"axios\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport shortid from \"shortid\";\n\nfunction loadPostAPI(data) {\n  return axios.get(\"/api/post\", data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(loadPostAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10),\n    });\n  } catch (error) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: error.response.data,\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction addPostAPI(data) {\n  return axios.post(\n    \"http://localhost:3065/post\",\n    { content: data },\n    {\n      withCredentials: true,\n    },\n  );\n}\nfunction* addPost(action) {\n  console.log(\"addpost\");\n  try {\n    const result = yield call(addPostAPI, action.data);\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data,\n    });\n    // const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data.id,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction removePostAPI() {\n  return axios.post(\"/api/post\");\n}\nfunction* removePost(action) {\n  console.log(\"addpost\");\n  try {\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n    // const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction addCommentAPI(data) {\n  //POST /post/1/comment\n  return axios.post(`http://localhost:3065/post/${data.postId}/comment`, data, {\n    withCredentials: true,\n  });\n}\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPost),\n    fork(watchAddComment),\n    fork(watchRemovePost),\n    fork(watchLoadPosts),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}