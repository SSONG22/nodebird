{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport shortId from \"shortid\";\nexport var initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: \"체리슈\"\n    },\n    content: \"첫번째 게시글 #해시태그 ##태그당 #ㅎㅇ\",\n    Images: [{\n      src: \"https://cgeimage.commutil.kr/phpwas/restmb_allidxmake.php?idx=3&simg=2019043021255500507482b2d760618310114012.jpg\"\n    }, {\n      src: \"http://ph.spotvnews.co.kr/news/photo/202001/338010_421317_1105.jpg\"\n    }, {\n      src: \"http://ph.spotvnews.co.kr/news/photo/202001/338010_421317_1105.jpg\"\n    }],\n    Comments: [{\n      User: {\n        nickname: \"nero\"\n      },\n      content: \"우와~ \"\n    }] //sequelize 와 연관되어 있기 때문에 (다른정보와 합쳐줘서 대문자로 줌)\n\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n}; // action //상수로 빼주면 재활용할 수 있다.\n\nexport var ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport var ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport var ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport var ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport var ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport var ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n}; // 동적인 액션이 필요할 때 액션 크리에이터 함수를 쓴다\n\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: \"chee99\"\n    },\n    Images: [],\n    Comments: []\n  };\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        // mainPosts: [dummyPost, ...state.mainPosts], // 앞에 추가\n        addPostDone: false,\n        addPostLoading: true\n      });\n\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostDone: true,\n        addPostLoading: false,\n        addPostError: null,\n        mainPosts: [dummyPost(action.data)].concat(_toConsumableArray(state.mainPosts))\n      });\n\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostDone: true,\n        addPostLoading: false,\n        addPostError: action.data\n      });\n\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        // mainPosts: [dummyPost, ...state.mainPosts], // 앞에 추가\n        addCommentDone: false,\n        addCommentLoading: true\n      });\n\n    case ADD_COMMENT_SUCCESS:\n      var postIndex = state.mainPosts.findIndex(function (v) {\n        return v.id === action.data.postId;\n      });\n      var post = state.mainPosts[postIndex];\n      var Comments = [dummyComment(action.data.content)].concat(_toConsumableArray(post.Comments));\n\n      var mainPosts = _toConsumableArray(state.mainPosts);\n\n      mainPosts[postIndex] = _objectSpread(_objectSpread({}, post), {}, {\n        Comments: Comments\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentDone: true,\n        addCommentLoading: false,\n        addCommentError: null\n      });\n\n    case ADD_COMMENT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentDone: true,\n        addCommentLoading: false,\n        addCommentError: action.data\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/songi/Documents/nodebird/front/reducers/post.js"],"names":["shortId","initialState","mainPosts","id","User","nickname","content","Images","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","generate","reducer","state","action","postIndex","findIndex","v","postId","post","dummyComment"],"mappings":"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","sourcesContent":["import shortId from \"shortid\";\nexport const initialState = {\n  mainPosts: [\n    {\n      id: 1,\n      User: {\n        id: 1,\n        nickname: \"체리슈\",\n      },\n      content: \"첫번째 게시글 #해시태그 ##태그당 #ㅎㅇ\",\n      Images: [\n        {\n          src:\n            \"https://cgeimage.commutil.kr/phpwas/restmb_allidxmake.php?idx=3&simg=2019043021255500507482b2d760618310114012.jpg\",\n        },\n        {\n          src:\n            \"http://ph.spotvnews.co.kr/news/photo/202001/338010_421317_1105.jpg\",\n        },\n        {\n          src:\n            \"http://ph.spotvnews.co.kr/news/photo/202001/338010_421317_1105.jpg\",\n        },\n      ],\n      Comments: [\n        {\n          User: {\n            nickname: \"nero\",\n          },\n          content: \"우와~ \",\n        },\n      ], //sequelize 와 연관되어 있기 때문에 (다른정보와 합쳐줘서 대문자로 줌)\n    },\n  ],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n};\n// action //상수로 빼주면 재활용할 수 있다.\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\n\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\n\nexport const addPost = (data) => {\n  return {\n    type: ADD_POST_REQUEST,\n    data,\n  };\n};\nexport const addComment = (data) => ({\n  type: ADD_COMMENT_REQUEST,\n  data,\n});\n// 동적인 액션이 필요할 때 액션 크리에이터 함수를 쓴다\nconst dummyPost = (data) => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"chee99\",\n  },\n  Images: [],\n  Comments: [],\n});\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return {\n        ...state,\n        // mainPosts: [dummyPost, ...state.mainPosts], // 앞에 추가\n        addPostDone: false,\n        addPostLoading: true,\n      };\n    case ADD_POST_SUCCESS:\n      return {\n        ...state,\n        addPostDone: true,\n        addPostLoading: false,\n        addPostError: null,\n        mainPosts: [dummyPost(action.data), ...state.mainPosts],\n      };\n    case ADD_POST_FAILURE:\n      return {\n        ...state,\n        addPostDone: true,\n        addPostLoading: false,\n        addPostError: action.data,\n      };\n    case ADD_COMMENT_REQUEST:\n      return {\n        ...state,\n        // mainPosts: [dummyPost, ...state.mainPosts], // 앞에 추가\n        addCommentDone: false,\n        addCommentLoading: true,\n      };\n\n    case ADD_COMMENT_SUCCESS:\n      const postIndex = state.mainPosts.findIndex(\n        (v) => v.id === action.data.postId,\n      );\n      const post = state.mainPosts[postIndex];\n      const Comments = [dummyComment(action.data.content), ...post.Comments];\n      const mainPosts = [...state.mainPosts];\n      mainPosts[postIndex] = { ...post, Comments };\n      return {\n        ...state,\n        addCommentDone: true,\n        addCommentLoading: false,\n        addCommentError: null,\n      };\n    case ADD_COMMENT_FAILURE:\n      return {\n        ...state,\n        addCommentDone: true,\n        addCommentLoading: false,\n        addCommentError: action.data,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}