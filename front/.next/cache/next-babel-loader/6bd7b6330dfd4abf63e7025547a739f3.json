{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loadPosts),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPosts),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\n/* eslint-disable no-unused-vars */\nimport { all, takeLatest, put, delay, fork, call, throttle } from \"redux-saga/effects\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, generateDummyPost } from \"../reducers/post\";\nimport axios from \"axios\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport shortid from \"shortid\";\n\nfunction loadPostAPI(data) {\n  return axios.get(\"/api/post\", data);\n}\n\nfunction loadPosts(action) {\n  return _regeneratorRuntime.wrap(function loadPosts$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return put({\n            type: LOAD_POSTS_SUCCESS,\n            data: generateDummyPost(10)\n          });\n\n        case 3:\n          _context.next = 9;\n          break;\n\n        case 5:\n          _context.prev = 5;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 9;\n          return put({\n            type: LOAD_POSTS_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 5]]);\n}\n\nfunction watchLoadPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadPosts$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction addPostAPI(data) {\n  return axios.post(\"http://localhost:3065/post\", {\n    content: data\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          console.log(\"addpost\");\n          _context3.prev = 1;\n          _context3.next = 4;\n          return call(addPostAPI, action.data);\n\n        case 4:\n          result = _context3.sent;\n          _context3.next = 7;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: result.data\n          });\n\n        case 7:\n          _context3.next = 9;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data.id\n          });\n\n        case 9:\n          _context3.next = 15;\n          break;\n\n        case 11:\n          _context3.prev = 11;\n          _context3.t0 = _context3[\"catch\"](1);\n          _context3.next = 15;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context3.t0.response.data\n          });\n\n        case 15:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[1, 11]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction removePostAPI() {\n  return axios.post(\"/api/post\");\n}\n\nfunction removePost(action) {\n  return _regeneratorRuntime.wrap(function removePost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          console.log(\"addpost\");\n          _context5.prev = 1;\n          _context5.next = 4;\n          return delay(1000);\n\n        case 4:\n          _context5.next = 6;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data\n          });\n\n        case 6:\n          _context5.next = 8;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: action.data\n          });\n\n        case 8:\n          _context5.next = 14;\n          break;\n\n        case 10:\n          _context5.prev = 10;\n          _context5.t0 = _context5[\"catch\"](1);\n          _context5.next = 14;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            data: _context5.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[1, 10]]);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction addCommentAPI(data) {\n  //POST /post/1/comment\n  return axios.post(\"http://localhost:3065/post/\".concat(data.postId, \"/comment\"), data, {\n    withCredentials: true\n  });\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(addCommentAPI, action.data);\n\n        case 3:\n          result = _context7.sent;\n          _context7.next = 6;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context7.next = 12;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          _context7.next = 12;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            data: _context7.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchLoadPosts)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}","map":{"version":3,"sources":["/Users/songi/Documents/nodebird/front/sagas/post.js"],"names":["loadPosts","watchLoadPosts","addPost","watchAddPost","removePost","watchRemovePost","addComment","watchAddComment","postSaga","all","takeLatest","put","delay","fork","call","throttle","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","generateDummyPost","axios","ADD_POST_TO_ME","REMOVE_POST_OF_ME","shortid","loadPostAPI","data","get","action","type","response","addPostAPI","post","content","withCredentials","console","log","result","id","removePostAPI","addCommentAPI","postId"],"mappings":";;oDAiCUA,S;qDAeAC,c;qDAaAC,O;qDAqBAC,Y;qDAOAC,U;qDAoBAC,e;qDAUAC,U;qDAcAC,e;qDAIeC,Q;;AAzIzB;AACA,SACEC,GADF,EAEEC,UAFF,EAGEC,GAHF,EAIEC,KAJF,EAKEC,IALF,EAMEC,IANF,EAOEC,QAPF,QAQO,oBARP;AASA,SACEC,gBADF,EAEEC,gBAFF,EAGEC,gBAHF,EAIEC,mBAJF,EAKEC,mBALF,EAMEC,mBANF,EAOEC,mBAPF,EAQEC,mBARF,EASEC,mBATF,EAUEC,kBAVF,EAWEC,kBAXF,EAYEC,kBAZF,EAaEC,iBAbF,QAcO,kBAdP;AAeA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,iBAAzB,QAAkD,kBAAlD;AACA,OAAOC,OAAP,MAAoB,SAApB;;AAEA,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AACzB,SAAOL,KAAK,CAACM,GAAN,CAAU,WAAV,EAAuBD,IAAvB,CAAP;AACD;;AAED,SAAUlC,SAAV,CAAoBoC,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGI,iBAAMzB,GAAG,CAAC;AACR0B,YAAAA,IAAI,EAAEX,kBADE;AAERQ,YAAAA,IAAI,EAAEN,iBAAiB,CAAC,EAAD;AAFf,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQI,iBAAMjB,GAAG,CAAC;AACR0B,YAAAA,IAAI,EAAEV,kBADE;AAERO,YAAAA,IAAI,EAAE,YAAMI,QAAN,CAAeJ;AAFb,WAAD,CAAT;;AARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAUjC,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMc,QAAQ,CAAC,IAAD,EAAOU,kBAAP,EAA2BzB,SAA3B,CAAd;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAASuC,UAAT,CAAoBL,IAApB,EAA0B;AACxB,SAAOL,KAAK,CAACW,IAAN,CACL,4BADK,EAEL;AAAEC,IAAAA,OAAO,EAAEP;AAAX,GAFK,EAGL;AACEQ,IAAAA,eAAe,EAAE;AADnB,GAHK,CAAP;AAOD;;AACD,SAAUxC,OAAV,CAAkBkC,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AACEO,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AADF;AAAA;AAGmB,iBAAM9B,IAAI,CAACyB,UAAD,EAAaH,MAAM,CAACF,IAApB,CAAV;;AAHnB;AAGUW,UAAAA,MAHV;AAAA;AAKI,iBAAMlC,GAAG,CAAC;AACR0B,YAAAA,IAAI,EAAEP,cADE;AAERI,YAAAA,IAAI,EAAEW,MAAM,CAACX;AAFL,WAAD,CAAT;;AALJ;AAAA;AAUI,iBAAMvB,GAAG,CAAC;AACR0B,YAAAA,IAAI,EAAEpB,gBADE;AAERiB,YAAAA,IAAI,EAAEW,MAAM,CAACX,IAAP,CAAYY;AAFV,WAAD,CAAT;;AAVJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAeI,iBAAMnC,GAAG,CAAC;AACR0B,YAAAA,IAAI,EAAEnB,gBADE;AAERgB,YAAAA,IAAI,EAAE,aAAII,QAAJ,CAAaJ;AAFX,WAAD,CAAT;;AAfJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAqBA,SAAU/B,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMO,UAAU,CAACM,gBAAD,EAAmBd,OAAnB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAS6C,aAAT,GAAyB;AACvB,SAAOlB,KAAK,CAACW,IAAN,CAAW,WAAX,CAAP;AACD;;AACD,SAAUpC,UAAV,CAAqBgC,MAArB;AAAA;AAAA;AAAA;AAAA;AACEO,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AADF;AAAA;AAGI,iBAAMhC,KAAK,CAAC,IAAD,CAAX;;AAHJ;AAAA;AAII,iBAAMD,GAAG,CAAC;AACR0B,YAAAA,IAAI,EAAEN,iBADE;AAERG,YAAAA,IAAI,EAAEE,MAAM,CAACF;AAFL,WAAD,CAAT;;AAJJ;AAAA;AASI,iBAAMvB,GAAG,CAAC;AACR0B,YAAAA,IAAI,EAAEd,mBADE;AAERW,YAAAA,IAAI,EAAEE,MAAM,CAACF;AAFL,WAAD,CAAT;;AATJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAcI,iBAAMvB,GAAG,CAAC;AACR0B,YAAAA,IAAI,EAAEb,mBADE;AAERU,YAAAA,IAAI,EAAE,aAAII,QAAJ,CAAaJ;AAFX,WAAD,CAAT;;AAdJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoBA,SAAU7B,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMK,UAAU,CAACY,mBAAD,EAAsBlB,UAAtB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAS4C,aAAT,CAAuBd,IAAvB,EAA6B;AAC3B;AACA,SAAOL,KAAK,CAACW,IAAN,sCAAyCN,IAAI,CAACe,MAA9C,eAAgEf,IAAhE,EAAsE;AAC3EQ,IAAAA,eAAe,EAAE;AAD0D,GAAtE,CAAP;AAGD;;AACD,SAAUpC,UAAV,CAAqB8B,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAMtB,IAAI,CAACkC,aAAD,EAAgBZ,MAAM,CAACF,IAAvB,CAAV;;AAFnB;AAEUW,UAAAA,MAFV;AAAA;AAGI,iBAAMlC,GAAG,CAAC;AACR0B,YAAAA,IAAI,EAAEjB,mBADE;AAERc,YAAAA,IAAI,EAAEW,MAAM,CAACX;AAFL,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQI,iBAAMvB,GAAG,CAAC;AACR0B,YAAAA,IAAI,EAAEhB,mBADE;AAERa,YAAAA,IAAI,EAAE,aAAII,QAAJ,CAAaJ;AAFX,WAAD,CAAT;;AARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,SAAU3B,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMG,UAAU,CAACS,mBAAD,EAAsBb,UAAtB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CACRI,IAAI,CAACV,YAAD,CADI,EAERU,IAAI,CAACN,eAAD,CAFI,EAGRM,IAAI,CAACR,eAAD,CAHI,EAIRQ,IAAI,CAACZ,cAAD,CAJI,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["/* eslint-disable no-unused-vars */\nimport {\n  all,\n  takeLatest,\n  put,\n  delay,\n  fork,\n  call,\n  throttle,\n} from \"redux-saga/effects\";\nimport {\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_COMMENT_FAILURE,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n  REMOVE_POST_FAILURE,\n  LOAD_POSTS_REQUEST,\n  LOAD_POSTS_SUCCESS,\n  LOAD_POSTS_FAILURE,\n  generateDummyPost,\n} from \"../reducers/post\";\nimport axios from \"axios\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport shortid from \"shortid\";\n\nfunction loadPostAPI(data) {\n  return axios.get(\"/api/post\", data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(loadPostAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10),\n    });\n  } catch (error) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: error.response.data,\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction addPostAPI(data) {\n  return axios.post(\n    \"http://localhost:3065/post\",\n    { content: data },\n    {\n      withCredentials: true,\n    },\n  );\n}\nfunction* addPost(action) {\n  console.log(\"addpost\");\n  try {\n    const result = yield call(addPostAPI, action.data);\n    // const id = shortid.generate()\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data,\n    });\n    // const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data.id,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction removePostAPI() {\n  return axios.post(\"/api/post\");\n}\nfunction* removePost(action) {\n  console.log(\"addpost\");\n  try {\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n    // const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction addCommentAPI(data) {\n  //POST /post/1/comment\n  return axios.post(`http://localhost:3065/post/${data.postId}/comment`, data, {\n    withCredentials: true,\n  });\n}\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPost),\n    fork(watchAddComment),\n    fork(watchRemovePost),\n    fork(watchLoadPosts),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}