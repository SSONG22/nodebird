{"ast":null,"code":"/* eslint-disable no-case-declarations */\nimport shortId from \"shortid\";\nimport produce from \"immer\";\nimport faker from \"faker\";\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null\n}; // export const generateDummyPost = (number) =>\n//   Array(number)\n//     .fill()\n//     .map(() => ({\n//       id: shortId.generate(),\n//       User: {\n//         id: shortId.generate(),\n//         nickname: faker.name.findName(),\n//       },\n//       content: faker.lorem.paragraph(),\n//       Images: [\n//         {\n//           src: faker.image.image(),\n//         },\n//       ],\n//       Comments: [\n//         {\n//           User: {\n//             id: shortId.generate(),\n//             nickname: faker.name.findName(),\n//           },\n//           content: faker.lorem.sentence(),\n//         },\n//       ],\n//     }));\n// initialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\n// action //상수로 빼주면 재활용할 수 있다.\n\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const addPost = data => {\n  return {\n    type: ADD_POST_REQUEST,\n    data\n  };\n};\nexport const addComment = data => {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data\n  };\n}; // 동적인 액션이 필요할 때 액션 크리에이터 함수를 쓴다\n// const dummyPost = (data) => ({\n//   id: shortId.generate(),\n//   content: data,\n//   User: {\n//     id: 1,\n//     nickname: \"chee99\",\n//   },\n//   Images: [],\n//   Comments: [],\n// });\n// const dummyComment = (data) => ({\n//   id: data.id,\n//   content: data.content,\n//   User: {\n//     id: 1,\n//     nickname: \"chee99\",\n//   },\n// });\n//이전 상태를 액션을 통해 다음 상태로 만들어내는 함수 (불변성은 지키면서)\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case LOAD_POSTS_REQUEST:\n      draft.loadPostsDone = false;\n      draft.loadPostsLoading = true;\n      draft.loadPostsError = null;\n      break;\n\n    case LOAD_POSTS_SUCCESS:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.loadPostsError = null;\n      draft.mainPosts = action.data.concat(draft.mainPosts);\n      draft.hasMorePosts = draft.mainPosts.length < 50;\n      break;\n\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.loadPostsError = action.data;\n      break;\n\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.addPostError = null;\n      draft.mainPosts.unshift(action.data); // draft.mainPosts.unshift(dummyPost(action.data));\n\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.addPostError = action.data;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      draft.removePostError = null;\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      draft.removePostError = action.data;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        draft.addCommentError = null;\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Comments.unshift(action.data); // post.Comments.unshift(dummyComment(action.data.content));\n\n        break;\n      }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentDone = true;\n      draft.addCommentError = action.data;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["/Users/songi/Documents/nodebird/front/reducers/post.js"],"names":["shortId","produce","faker","initialState","mainPosts","imagePaths","hasMorePosts","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","addPost","data","type","addComment","reducer","state","action","draft","concat","length","unshift","filter","v","id","post","find","PostId","Comments"],"mappings":"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","sourcesContent":["/* eslint-disable no-case-declarations */\nimport shortId from \"shortid\";\nimport produce from \"immer\";\nimport faker from \"faker\";\n\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n};\n// export const generateDummyPost = (number) =>\n//   Array(number)\n//     .fill()\n//     .map(() => ({\n//       id: shortId.generate(),\n//       User: {\n//         id: shortId.generate(),\n//         nickname: faker.name.findName(),\n//       },\n//       content: faker.lorem.paragraph(),\n//       Images: [\n//         {\n//           src: faker.image.image(),\n//         },\n//       ],\n//       Comments: [\n//         {\n//           User: {\n//             id: shortId.generate(),\n//             nickname: faker.name.findName(),\n//           },\n//           content: faker.lorem.sentence(),\n//         },\n//       ],\n//     }));\n\n// initialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\n\n// action //상수로 빼주면 재활용할 수 있다.\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\n\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\n\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\n\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\n\nexport const addPost = (data) => {\n  return {\n    type: ADD_POST_REQUEST,\n    data,\n  };\n};\nexport const addComment = (data) => {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data,\n  };\n};\n// 동적인 액션이 필요할 때 액션 크리에이터 함수를 쓴다\n// const dummyPost = (data) => ({\n//   id: shortId.generate(),\n//   content: data,\n//   User: {\n//     id: 1,\n//     nickname: \"chee99\",\n//   },\n//   Images: [],\n//   Comments: [],\n// });\n// const dummyComment = (data) => ({\n//   id: data.id,\n//   content: data.content,\n//   User: {\n//     id: 1,\n//     nickname: \"chee99\",\n//   },\n// });\n//이전 상태를 액션을 통해 다음 상태로 만들어내는 함수 (불변성은 지키면서)\nconst reducer = (state = initialState, action) =>\n  produce(state, (draft) => {\n    switch (action.type) {\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsDone = false;\n        draft.loadPostsLoading = true;\n        draft.loadPostsError = null;\n        break;\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.loadPostsError = null;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.hasMorePosts = draft.mainPosts.length < 50;\n        break;\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.loadPostsError = action.data;\n        break;\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.addPostError = null;\n        draft.mainPosts.unshift(action.data);\n        // draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.addPostError = action.data;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.removePostError = null;\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.removePostError = action.data;\n        break;\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS: {\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        draft.addCommentError = null;\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n        post.Comments.unshift(action.data);\n        // post.Comments.unshift(dummyComment(action.data.content));\n        break;\n      }\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        draft.addCommentError = action.data;\n        break;\n      default:\n        break;\n    }\n  });\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}