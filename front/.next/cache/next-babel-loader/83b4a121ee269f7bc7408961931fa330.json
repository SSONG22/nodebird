{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: \"체리슈\"\n    },\n    content: \"첫번째 게시글 #해시태그 ##태그당 #ㅎㅇ\",\n    Images: [{\n      src: \"https://cgeimage.commutil.kr/phpwas/restmb_allidxmake.php?idx=3&simg=2019043021255500507482b2d760618310114012.jpg\"\n    }, {\n      src: \"http://ph.spotvnews.co.kr/news/photo/202001/338010_421317_1105.jpg\"\n    }, {\n      src: \"http://ph.spotvnews.co.kr/news/photo/202001/338010_421317_1105.jpg\"\n    }],\n    Comments: [{\n      User: {\n        nickname: \"nero\"\n      },\n      content: \"우와~ \"\n    }] //sequelize 와 연관되어 있기 때문에 (다른정보와 합쳐줘서 대문자로 줌)\n\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null\n}; //action //상수로 빼주면 재활용할 수 있다.\n\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n}); //동적인 액션이 필요할 때 액션 크리에이터 함수를 쓴다\n\nconst dummyPost = {\n  id: 2,\n  content: \"더미\",\n  User: {\n    id: 1,\n    nickname: \"더미\"\n  },\n  Images: [],\n  Comments: []\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [dummyPost, ...state.mainPosts],\n        //앞에 추가\n        addPostDone: false,\n        addPostLoading: true\n      });\n\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostDone: true,\n        addPostLoading: false,\n        addPostError: null,\n        mainPosts: [action.data, ...state.mainPosts]\n      });\n\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostDone: true,\n        addPostLoading: false,\n        addPostError: action.data\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/songi/Documents/nodebird/front/reducers/post.js"],"names":["initialState","mainPosts","id","User","nickname","content","Images","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","addPost","data","type","dummyPost","reducer","state","action"],"mappings":";;;;;;AAAA,OAAO,MAAMA,YAAY,GAAG;AAC1BC,EAAAA,SAAS,EAAE,CACT;AACEC,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,IAAI,EAAE;AACJD,MAAAA,EAAE,EAAE,CADA;AAEJE,MAAAA,QAAQ,EAAE;AAFN,KAFR;AAMEC,IAAAA,OAAO,EAAE,yBANX;AAOEC,IAAAA,MAAM,EAAE,CACN;AACEC,MAAAA,GAAG,EACD;AAFJ,KADM,EAKN;AACEA,MAAAA,GAAG,EACD;AAFJ,KALM,EASN;AACEA,MAAAA,GAAG,EACD;AAFJ,KATM,CAPV;AAqBEC,IAAAA,QAAQ,EAAE,CACR;AACEL,MAAAA,IAAI,EAAE;AACJC,QAAAA,QAAQ,EAAE;AADN,OADR;AAIEC,MAAAA,OAAO,EAAE;AAJX,KADQ,CArBZ,CA4BK;;AA5BL,GADS,CADe;AAiC1BI,EAAAA,UAAU,EAAE,EAjCc;AAkC1BC,EAAAA,cAAc,EAAE,KAlCU;AAmC1BC,EAAAA,WAAW,EAAE,KAnCa;AAoC1BC,EAAAA,YAAY,EAAE;AApCY,CAArB,C,CAsCP;;AACA,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AAEP,OAAO,MAAMC,OAAO,GAAIC,IAAD,KAAW;AAChCC,EAAAA,IAAI,EAAEL,gBAD0B;AAEhCI,EAAAA;AAFgC,CAAX,CAAhB,C,CAIP;;AACA,MAAME,SAAS,GAAG;AAChBjB,EAAAA,EAAE,EAAE,CADY;AAEhBG,EAAAA,OAAO,EAAE,IAFO;AAGhBF,EAAAA,IAAI,EAAE;AACJD,IAAAA,EAAE,EAAE,CADA;AAEJE,IAAAA,QAAQ,EAAE;AAFN,GAHU;AAOhBE,EAAAA,MAAM,EAAE,EAPQ;AAQhBE,EAAAA,QAAQ,EAAE;AARM,CAAlB;;AAWA,MAAMY,OAAO,GAAG,CAACC,KAAK,GAAGrB,YAAT,EAAuBsB,MAAvB,KAAkC;AAChD,UAAQA,MAAM,CAACJ,IAAf;AACE,SAAKL,gBAAL;AACE,6CACKQ,KADL;AAEEpB,QAAAA,SAAS,EAAE,CAACkB,SAAD,EAAY,GAAGE,KAAK,CAACpB,SAArB,CAFb;AAE8C;AAC5CU,QAAAA,WAAW,EAAE,KAHf;AAIED,QAAAA,cAAc,EAAE;AAJlB;;AAOF,SAAKI,gBAAL;AACE,6CACKO,KADL;AAEEV,QAAAA,WAAW,EAAE,IAFf;AAGED,QAAAA,cAAc,EAAE,KAHlB;AAIEE,QAAAA,YAAY,EAAE,IAJhB;AAKEX,QAAAA,SAAS,EAAE,CAACqB,MAAM,CAACL,IAAR,EAAc,GAAGI,KAAK,CAACpB,SAAvB;AALb;;AAOF,SAAKc,gBAAL;AACE,6CACKM,KADL;AAEEV,QAAAA,WAAW,EAAE,IAFf;AAGED,QAAAA,cAAc,EAAE,KAHlB;AAIEE,QAAAA,YAAY,EAAEU,MAAM,CAACL;AAJvB;;AAMF;AACE,aAAOI,KAAP;AAzBJ;AA2BD,CA5BD;;AA8BA,eAAeD,OAAf","sourcesContent":["export const initialState = {\n  mainPosts: [\n    {\n      id: 1,\n      User: {\n        id: 1,\n        nickname: \"체리슈\",\n      },\n      content: \"첫번째 게시글 #해시태그 ##태그당 #ㅎㅇ\",\n      Images: [\n        {\n          src:\n            \"https://cgeimage.commutil.kr/phpwas/restmb_allidxmake.php?idx=3&simg=2019043021255500507482b2d760618310114012.jpg\",\n        },\n        {\n          src:\n            \"http://ph.spotvnews.co.kr/news/photo/202001/338010_421317_1105.jpg\",\n        },\n        {\n          src:\n            \"http://ph.spotvnews.co.kr/news/photo/202001/338010_421317_1105.jpg\",\n        },\n      ],\n      Comments: [\n        {\n          User: {\n            nickname: \"nero\",\n          },\n          content: \"우와~ \",\n        },\n      ], //sequelize 와 연관되어 있기 때문에 (다른정보와 합쳐줘서 대문자로 줌)\n    },\n  ],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n};\n//action //상수로 빼주면 재활용할 수 있다.\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\n\nexport const addPost = (data) => ({\n  type: ADD_POST_REQUEST,\n  data,\n});\n//동적인 액션이 필요할 때 액션 크리에이터 함수를 쓴다\nconst dummyPost = {\n  id: 2,\n  content: \"더미\",\n  User: {\n    id: 1,\n    nickname: \"더미\",\n  },\n  Images: [],\n  Comments: [],\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return {\n        ...state,\n        mainPosts: [dummyPost, ...state.mainPosts], //앞에 추가\n        addPostDone: false,\n        addPostLoading: true,\n      };\n\n    case ADD_POST_SUCCESS:\n      return {\n        ...state,\n        addPostDone: true,\n        addPostLoading: false,\n        addPostError: null,\n        mainPosts: [action.data, ...state.mainPosts],\n      };\n    case ADD_POST_FAILURE:\n      return {\n        ...state,\n        addPostDone: true,\n        addPostLoading: false,\n        addPostError: action.data,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}