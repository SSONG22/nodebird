{"ast":null,"code":"import { all, takeLatest, put, delay, fork, call } from \"redux-saga/effects\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE } from \"../reducers/post\";\nimport axios from \"axios\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport shortid from \"shortid\";\n\nfunction loadPostAPI(data) {\n  return axios.get(\"/api/post\", data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(loadPostAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS // data: result,\n\n    });\n  } catch (error) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: error.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action) {\n  console.log(\"addpost\");\n\n  try {\n    yield delay(1000);\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: {\n        id,\n        content: action.data\n      }\n    }); // const result = yield call(addPostAPI, action.data);\n\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction removePostAPI() {\n  return axios.post(\"/api/post\");\n}\n\nfunction* removePost(action) {\n  console.log(\"addpost\");\n\n  try {\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    }); // const result = yield call(addPostAPI, action.data);\n\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    yield delay(1000); // const result = yield call(addCommentAPI, action.data);\n\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchLoadPosts)]);\n}","map":{"version":3,"sources":["/Users/songi/Documents/nodebird/front/sagas/post.js"],"names":["all","takeLatest","put","delay","fork","call","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","axios","ADD_POST_TO_ME","REMOVE_POST_OF_ME","shortid","loadPostAPI","data","get","loadPosts","action","type","error","response","watchLoadPosts","addPostAPI","post","addPost","console","log","id","generate","content","err","watchAddPost","removePostAPI","removePost","watchRemovePost","addCommentAPI","postId","addComment","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import { all, takeLatest, put, delay, fork, call } from \"redux-saga/effects\";\nimport {\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_COMMENT_FAILURE,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n  REMOVE_POST_FAILURE,\n  LOAD_POSTS_REQUEST,\n  LOAD_POSTS_SUCCESS,\n  LOAD_POSTS_FAILURE,\n} from \"../reducers/post\";\nimport axios from \"axios\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport shortid from \"shortid\";\n\nfunction loadPostAPI(data) {\n  return axios.get(\"/api/post\", data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(loadPostAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      // data: result,\n    });\n  } catch (error) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: error.response.data,\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\nfunction* addPost(action) {\n  console.log(\"addpost\");\n  try {\n    yield delay(1000);\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: {\n        id,\n        content: action.data,\n      },\n    });\n    // const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction removePostAPI() {\n  return axios.post(\"/api/post\");\n}\nfunction* removePost(action) {\n  console.log(\"addpost\");\n  try {\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n    // const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    yield delay(1000);\n    // const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPost),\n    fork(watchAddComment),\n    fork(watchRemovePost),\n    fork(watchLoadPosts),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}