{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\n/* eslint-disable no-case-declarations */\nimport shortId from \"shortid\";\nimport produce from \"immer\";\nimport faker from \"faker\";\nexport var initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: \"체리슈\"\n    },\n    content: \"첫번째 게시글 #해시태그 ##태그당 #ㅎㅇ\",\n    Images: [{\n      id: shortId.generate(),\n      src: \"https://cgeimage.commutil.kr/phpwas/restmb_allidxmake.php?idx=3&simg=2019043021255500507482b2d760618310114012.jpg\"\n    }, {\n      id: shortId.generate(),\n      src: \"http://ph.spotvnews.co.kr/news/photo/202001/338010_421317_1105.jpg\"\n    }, {\n      id: shortId.generate(),\n      src: \"http://ph.spotvnews.co.kr/news/photo/202001/338010_421317_1105.jpg\"\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: \"nero\"\n      },\n      content: \"잘생겼다\"\n    }] //sequelize 와 연관되어 있기 때문에 (다른정보와 합쳐줘서 대문자로 줌)\n\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null\n};\ninitialState.mainPosts.concat(Array(20).fill().map(function (v, i) {\n  return {\n    id: shortId.generate(),\n    Images: [],\n    Comments: []\n  };\n})); // action //상수로 빼주면 재활용할 수 있다.\n\nexport var ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport var ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport var ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport var ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport var ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport var ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport var REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport var REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport var REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n}; // 동적인 액션이 필요할 때 액션 크리에이터 함수를 쓴다\n\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: \"chee99\"\n    },\n    Images: [],\n    Comments: []\n  };\n};\n\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: \"chee99\"\n    }\n  };\n}; //이전 상태를 액션을 통해 다음 상태로 만들어내는 함수 (불변성은 지키면서)\n\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.addPostError = null;\n        draft.mainPosts.unshift([dummyPost(action.data)].concat(_toConsumableArray(state.mainPosts)));\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.addPostError = action.data;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.removePostError = null;\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data;\n        });\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.removePostError = action.data;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          draft.addCommentError = null;\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.postId;\n          });\n          post.Comments.unshift(dummyComment(action.data.content));\n          break;\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        draft.addCommentError = action.data;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/songi/Documents/nodebird/front/reducers/post.js"],"names":["shortId","produce","faker","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","concat","Array","fill","map","v","i","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","unshift","filter","post","find","postId"],"mappings":";;AAAA;AACA,OAAOA,OAAP,MAAoB,SAApB;AACA,OAAOC,OAAP,MAAoB,OAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,IAAMC,YAAY,GAAG;AAC1BC,EAAAA,SAAS,EAAE,CACT;AACEC,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,IAAI,EAAE;AACJD,MAAAA,EAAE,EAAE,CADA;AAEJE,MAAAA,QAAQ,EAAE;AAFN,KAFR;AAMEC,IAAAA,OAAO,EAAE,yBANX;AAOEC,IAAAA,MAAM,EAAE,CACN;AACEJ,MAAAA,EAAE,EAAEL,OAAO,CAACU,QAAR,EADN;AAEEC,MAAAA,GAAG,EACD;AAHJ,KADM,EAMN;AACEN,MAAAA,EAAE,EAAEL,OAAO,CAACU,QAAR,EADN;AAEEC,MAAAA,GAAG,EACD;AAHJ,KANM,EAWN;AACEN,MAAAA,EAAE,EAAEL,OAAO,CAACU,QAAR,EADN;AAEEC,MAAAA,GAAG,EACD;AAHJ,KAXM,CAPV;AAwBEC,IAAAA,QAAQ,EAAE,CACR;AACEP,MAAAA,EAAE,EAAEL,OAAO,CAACU,QAAR,EADN;AAEEJ,MAAAA,IAAI,EAAE;AACJD,QAAAA,EAAE,EAAEL,OAAO,CAACU,QAAR,EADA;AAEJH,QAAAA,QAAQ,EAAE;AAFN,OAFR;AAMEC,MAAAA,OAAO,EAAE;AANX,KADQ,CAxBZ,CAiCK;;AAjCL,GADS,CADe;AAsC1BK,EAAAA,UAAU,EAAE,EAtCc;AAuC1BC,EAAAA,cAAc,EAAE,KAvCU;AAwC1BC,EAAAA,WAAW,EAAE,KAxCa;AAyC1BC,EAAAA,YAAY,EAAE,IAzCY;AA2C1BC,EAAAA,iBAAiB,EAAE,KA3CO;AA4C1BC,EAAAA,cAAc,EAAE,KA5CU;AA6C1BC,EAAAA,eAAe,EAAE,IA7CS;AA+C1BC,EAAAA,iBAAiB,EAAE,KA/CO;AAgD1BC,EAAAA,cAAc,EAAE,KAhDU;AAiD1BC,EAAAA,eAAe,EAAE;AAjDS,CAArB;AAoDPnB,YAAY,CAACC,SAAb,CAAuBmB,MAAvB,CACEC,KAAK,CAAC,EAAD,CAAL,CACGC,IADH,GAEGC,GAFH,CAEO,UAACC,CAAD,EAAIC,CAAJ;AAAA,SAAW;AACdvB,IAAAA,EAAE,EAAEL,OAAO,CAACU,QAAR,EADU;AAEdD,IAAAA,MAAM,EAAE,EAFM;AAGdG,IAAAA,QAAQ,EAAE;AAHI,GAAX;AAAA,CAFP,CADF,E,CAUA;;AACA,OAAO,IAAMiB,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AAEP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD,EAAU;AAC/B,SAAO;AACLC,IAAAA,IAAI,EAAEX,gBADD;AAELU,IAAAA,IAAI,EAAJA;AAFK,GAAP;AAID,CALM;AAMP,OAAO,IAAME,UAAU,GAAG,SAAbA,UAAa,CAACF,IAAD,EAAU;AAClC,SAAO;AACLC,IAAAA,IAAI,EAAER,mBADD;AAELO,IAAAA,IAAI,EAAJA;AAFK,GAAP;AAID,CALM,C,CAMP;;AACA,IAAMG,SAAS,GAAG,SAAZA,SAAY,CAACH,IAAD;AAAA,SAAW;AAC3BlC,IAAAA,EAAE,EAAEL,OAAO,CAACU,QAAR,EADuB;AAE3BF,IAAAA,OAAO,EAAE+B,IAFkB;AAG3BjC,IAAAA,IAAI,EAAE;AACJD,MAAAA,EAAE,EAAE,CADA;AAEJE,MAAAA,QAAQ,EAAE;AAFN,KAHqB;AAO3BE,IAAAA,MAAM,EAAE,EAPmB;AAQ3BG,IAAAA,QAAQ,EAAE;AARiB,GAAX;AAAA,CAAlB;;AAUA,IAAM+B,YAAY,GAAG,SAAfA,YAAe,CAACJ,IAAD;AAAA,SAAW;AAC9BlC,IAAAA,EAAE,EAAEkC,IAAI,CAAClC,EADqB;AAE9BG,IAAAA,OAAO,EAAE+B,IAAI,CAAC/B,OAFgB;AAG9BF,IAAAA,IAAI,EAAE;AACJD,MAAAA,EAAE,EAAE,CADA;AAEJE,MAAAA,QAAQ,EAAE;AAFN;AAHwB,GAAX;AAAA,CAArB,C,CAQA;;;AACA,IAAMqC,OAAO,GAAG,SAAVA,OAAU;AAAA,MAACC,KAAD,uEAAS1C,YAAT;AAAA,MAAuB2C,MAAvB;AAAA,SACd7C,OAAO,CAAC4C,KAAD,EAAQ,UAACE,KAAD,EAAW;AACxB,YAAQD,MAAM,CAACN,IAAf;AACE,WAAKX,gBAAL;AACEkB,QAAAA,KAAK,CAACjC,cAAN,GAAuB,IAAvB;AACAiC,QAAAA,KAAK,CAAChC,WAAN,GAAoB,KAApB;AACAgC,QAAAA,KAAK,CAAC/B,YAAN,GAAqB,IAArB;AACA;;AACF,WAAKc,gBAAL;AACEiB,QAAAA,KAAK,CAACjC,cAAN,GAAuB,KAAvB;AACAiC,QAAAA,KAAK,CAAChC,WAAN,GAAoB,IAApB;AACAgC,QAAAA,KAAK,CAAC/B,YAAN,GAAqB,IAArB;AACA+B,QAAAA,KAAK,CAAC3C,SAAN,CAAgB4C,OAAhB,EAAyBN,SAAS,CAACI,MAAM,CAACP,IAAR,CAAlC,4BAAoDM,KAAK,CAACzC,SAA1D;AACA;;AACF,WAAK2B,gBAAL;AACEgB,QAAAA,KAAK,CAACjC,cAAN,GAAuB,KAAvB;AACAiC,QAAAA,KAAK,CAAChC,WAAN,GAAoB,IAApB;AACAgC,QAAAA,KAAK,CAAC/B,YAAN,GAAqB8B,MAAM,CAACP,IAA5B;AACA;;AACF,WAAKJ,mBAAL;AACEY,QAAAA,KAAK,CAAC3B,iBAAN,GAA0B,IAA1B;AACA2B,QAAAA,KAAK,CAAC1B,cAAN,GAAuB,KAAvB;AACA0B,QAAAA,KAAK,CAACzB,eAAN,GAAwB,IAAxB;AACA;;AACF,WAAKc,mBAAL;AACEW,QAAAA,KAAK,CAAC3B,iBAAN,GAA0B,KAA1B;AACA2B,QAAAA,KAAK,CAAC1B,cAAN,GAAuB,IAAvB;AACA0B,QAAAA,KAAK,CAACzB,eAAN,GAAwB,IAAxB;AACAyB,QAAAA,KAAK,CAAC3C,SAAN,GAAkB2C,KAAK,CAAC3C,SAAN,CAAgB6C,MAAhB,CAAuB,UAACtB,CAAD;AAAA,iBAAOA,CAAC,CAACtB,EAAF,KAASyC,MAAM,CAACP,IAAvB;AAAA,SAAvB,CAAlB;AACA;;AACF,WAAKF,mBAAL;AACEU,QAAAA,KAAK,CAAC3B,iBAAN,GAA0B,KAA1B;AACA2B,QAAAA,KAAK,CAAC1B,cAAN,GAAuB,IAAvB;AACA0B,QAAAA,KAAK,CAACzB,eAAN,GAAwBwB,MAAM,CAACP,IAA/B;AACA;;AACF,WAAKP,mBAAL;AACEe,QAAAA,KAAK,CAAC9B,iBAAN,GAA0B,IAA1B;AACA8B,QAAAA,KAAK,CAAC7B,cAAN,GAAuB,KAAvB;AACA6B,QAAAA,KAAK,CAAC5B,eAAN,GAAwB,IAAxB;AACA;;AACF,WAAKc,mBAAL;AAA0B;AACxBc,UAAAA,KAAK,CAAC9B,iBAAN,GAA0B,KAA1B;AACA8B,UAAAA,KAAK,CAAC7B,cAAN,GAAuB,IAAvB;AACA6B,UAAAA,KAAK,CAAC5B,eAAN,GAAwB,IAAxB;AACA,cAAM+B,IAAI,GAAGH,KAAK,CAAC3C,SAAN,CAAgB+C,IAAhB,CAAqB,UAACxB,CAAD;AAAA,mBAAOA,CAAC,CAACtB,EAAF,KAASyC,MAAM,CAACP,IAAP,CAAYa,MAA5B;AAAA,WAArB,CAAb;AACAF,UAAAA,IAAI,CAACtC,QAAL,CAAcoC,OAAd,CAAsBL,YAAY,CAACG,MAAM,CAACP,IAAP,CAAY/B,OAAb,CAAlC;AACA;AACD;;AACD,WAAK0B,mBAAL;AACEa,QAAAA,KAAK,CAAC9B,iBAAN,GAA0B,KAA1B;AACA8B,QAAAA,KAAK,CAAC7B,cAAN,GAAuB,IAAvB;AACA6B,QAAAA,KAAK,CAAC5B,eAAN,GAAwB2B,MAAM,CAACP,IAA/B;AACA;;AACF;AACE;AApDJ;AAsDD,GAvDM,CADO;AAAA,CAAhB;;AA0DA,eAAeK,OAAf","sourcesContent":["/* eslint-disable no-case-declarations */\nimport shortId from \"shortid\";\nimport produce from \"immer\";\nimport faker from \"faker\";\n\nexport const initialState = {\n  mainPosts: [\n    {\n      id: 1,\n      User: {\n        id: 1,\n        nickname: \"체리슈\",\n      },\n      content: \"첫번째 게시글 #해시태그 ##태그당 #ㅎㅇ\",\n      Images: [\n        {\n          id: shortId.generate(),\n          src:\n            \"https://cgeimage.commutil.kr/phpwas/restmb_allidxmake.php?idx=3&simg=2019043021255500507482b2d760618310114012.jpg\",\n        },\n        {\n          id: shortId.generate(),\n          src:\n            \"http://ph.spotvnews.co.kr/news/photo/202001/338010_421317_1105.jpg\",\n        },\n        {\n          id: shortId.generate(),\n          src:\n            \"http://ph.spotvnews.co.kr/news/photo/202001/338010_421317_1105.jpg\",\n        },\n      ],\n      Comments: [\n        {\n          id: shortId.generate(),\n          User: {\n            id: shortId.generate(),\n            nickname: \"nero\",\n          },\n          content: \"잘생겼다\",\n        },\n      ], //sequelize 와 연관되어 있기 때문에 (다른정보와 합쳐줘서 대문자로 줌)\n    },\n  ],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n};\n\ninitialState.mainPosts.concat(\n  Array(20)\n    .fill()\n    .map((v, i) => ({\n      id: shortId.generate(),\n      Images: [],\n      Comments: [],\n    })),\n);\n\n// action //상수로 빼주면 재활용할 수 있다.\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\n\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\n\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\n\nexport const addPost = (data) => {\n  return {\n    type: ADD_POST_REQUEST,\n    data,\n  };\n};\nexport const addComment = (data) => {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data,\n  };\n};\n// 동적인 액션이 필요할 때 액션 크리에이터 함수를 쓴다\nconst dummyPost = (data) => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"chee99\",\n  },\n  Images: [],\n  Comments: [],\n});\nconst dummyComment = (data) => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"chee99\",\n  },\n});\n//이전 상태를 액션을 통해 다음 상태로 만들어내는 함수 (불변성은 지키면서)\nconst reducer = (state = initialState, action) =>\n  produce(state, (draft) => {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.addPostError = null;\n        draft.mainPosts.unshift([dummyPost(action.data), ...state.mainPosts]);\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.addPostError = action.data;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.removePostError = null;\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.removePostError = action.data;\n        break;\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS: {\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        draft.addCommentError = null;\n        const post = draft.mainPosts.find((v) => v.id === action.data.postId);\n        post.Comments.unshift(dummyComment(action.data.content));\n        break;\n      }\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        draft.addCommentError = action.data;\n        break;\n      default:\n        break;\n    }\n  });\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}