{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/songi/Documents/nodebird/front/components/CommentForm.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect } from \"react\";\nimport { Input, Form, Button } from \"antd\";\nimport PropTypes from \"prop-types\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport useInput from \"../hooks/useInput\"; // eslint-disable-next-line no-unused-vars\n\nimport { ADD_COMMENT_REQUEST, addComment } from \"../reducers/post\";\n\nvar CommentForm = function CommentForm(_ref) {\n  _s();\n\n  var post = _ref.post;\n  var id = useSelector(function (state) {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      addCommentDone = _useSelector.addCommentDone,\n      addCommentLoading = _useSelector.addCommentLoading;\n\n  var dispatch = useDispatch();\n\n  var _useInput = useInput(\"\"),\n      _useInput2 = _slicedToArray(_useInput, 3),\n      commentText = _useInput2[0],\n      onChangeCommentText = _useInput2[1],\n      setCommentText = _useInput2[2];\n\n  var onSubmitComment = useCallback(function () {\n    console.log(post.id, commentText);\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        content: commentText,\n        postId: post.id,\n        userId: id\n      }\n    }); // 액션객체로 놓는 방법 / 불러오는 방법\n  }, [commentText, id]);\n  useEffect(function () {\n    if (addCommentDone) setCommentText(\"\");\n  }, [addCommentDone]);\n  return __jsx(Form, {\n    onFinish: onSubmitComment,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, __jsx(Form.Item, {\n    style: {\n      position: \"relative\",\n      margin: 0\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, __jsx(Input.TextArea, {\n    value: commentText,\n    onChange: onChangeCommentText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: addCommentLoading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, \"\\uC090\\uC57D\")));\n};\n\n_s(CommentForm, \"dk914MNn87HtnQ7B87fRC2C/s5k=\", false, function () {\n  return [useSelector, useSelector, useDispatch, useInput];\n});\n\n_c = CommentForm;\nCommentForm.propTypes = {\n  post: PropTypes.object.isRequired\n};\nexport default CommentForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommentForm\");","map":{"version":3,"sources":["/Users/songi/Documents/nodebird/front/components/CommentForm.js"],"names":["React","useCallback","useEffect","Input","Form","Button","PropTypes","useSelector","useDispatch","useInput","ADD_COMMENT_REQUEST","addComment","CommentForm","post","id","state","user","me","addCommentDone","addCommentLoading","dispatch","commentText","onChangeCommentText","setCommentText","onSubmitComment","console","log","type","data","content","postId","userId","position","margin","propTypes","object","isRequired"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,QAA8C,OAA9C;AACA,SAASC,KAAT,EAAgBC,IAAhB,EAAsBC,MAAtB,QAAoC,MAApC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,QAAP,MAAqB,mBAArB,C,CACA;;AACA,SAASC,mBAAT,EAA8BC,UAA9B,QAAgD,kBAAhD;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAc;AAAA;;AAAA,MAAXC,IAAW,QAAXA,IAAW;AAChC,MAAMC,EAAE,GAAGP,WAAW,CAAC,UAACQ,KAAD;AAAA;;AAAA,6BAAWA,KAAK,CAACC,IAAN,CAAWC,EAAtB,mDAAW,eAAeH,EAA1B;AAAA,GAAD,CAAtB;;AADgC,qBAEcP,WAAW,CACvD,UAACQ,KAAD;AAAA,WAAWA,KAAK,CAACF,IAAjB;AAAA,GADuD,CAFzB;AAAA,MAExBK,cAFwB,gBAExBA,cAFwB;AAAA,MAERC,iBAFQ,gBAERA,iBAFQ;;AAKhC,MAAMC,QAAQ,GAAGZ,WAAW,EAA5B;;AALgC,kBAO2BC,QAAQ,CAAC,EAAD,CAPnC;AAAA;AAAA,MAOzBY,WAPyB;AAAA,MAOZC,mBAPY;AAAA,MAOSC,cAPT;;AAShC,MAAMC,eAAe,GAAGvB,WAAW,CAAC,YAAM;AACxCwB,IAAAA,OAAO,CAACC,GAAR,CAAYb,IAAI,CAACC,EAAjB,EAAqBO,WAArB;AACAD,IAAAA,QAAQ,CAAC;AACPO,MAAAA,IAAI,EAAEjB,mBADC;AAEPkB,MAAAA,IAAI,EAAE;AAAEC,QAAAA,OAAO,EAAER,WAAX;AAAwBS,QAAAA,MAAM,EAAEjB,IAAI,CAACC,EAArC;AAAyCiB,QAAAA,MAAM,EAAEjB;AAAjD;AAFC,KAAD,CAAR,CAFwC,CAKpC;AACL,GANkC,EAMhC,CAACO,WAAD,EAAcP,EAAd,CANgC,CAAnC;AAQAZ,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIgB,cAAJ,EAAoBK,cAAc,CAAC,EAAD,CAAd;AACrB,GAFQ,EAEN,CAACL,cAAD,CAFM,CAAT;AAIA,SACE,MAAC,IAAD;AAAM,IAAA,QAAQ,EAAEM,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD,CAAM,IAAN;AAAW,IAAA,KAAK,EAAE;AAAEQ,MAAAA,QAAQ,EAAE,UAAZ;AAAwBC,MAAAA,MAAM,EAAE;AAAhC,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD,CAAO,QAAP;AAAgB,IAAA,KAAK,EAAEZ,WAAvB;AAAoC,IAAA,QAAQ,EAAEC,mBAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,SAAb;AAAuB,IAAA,QAAQ,EAAC,QAAhC;AAAyC,IAAA,OAAO,EAAEH,iBAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF,CADF,CADF;AAUD,CA/BD;;GAAMP,W;UACOL,W,EACmCA,W,EAG7BC,W,EAE0CC,Q;;;KAPvDG,W;AAiCNA,WAAW,CAACsB,SAAZ,GAAwB;AACtBrB,EAAAA,IAAI,EAAEP,SAAS,CAAC6B,MAAV,CAAiBC;AADD,CAAxB;AAIA,eAAexB,WAAf","sourcesContent":["import React, { useCallback, useEffect } from \"react\";\nimport { Input, Form, Button } from \"antd\";\nimport PropTypes from \"prop-types\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport useInput from \"../hooks/useInput\";\n// eslint-disable-next-line no-unused-vars\nimport { ADD_COMMENT_REQUEST, addComment } from \"../reducers/post\";\n\nconst CommentForm = ({ post }) => {\n  const id = useSelector((state) => state.user.me?.id);\n  const { addCommentDone, addCommentLoading } = useSelector(\n    (state) => state.post,\n  );\n  const dispatch = useDispatch();\n\n  const [commentText, onChangeCommentText, setCommentText] = useInput(\"\");\n\n  const onSubmitComment = useCallback(() => {\n    console.log(post.id, commentText);\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: { content: commentText, postId: post.id, userId: id },\n    }); // 액션객체로 놓는 방법 / 불러오는 방법\n  }, [commentText, id]);\n\n  useEffect(() => {\n    if (addCommentDone) setCommentText(\"\");\n  }, [addCommentDone]);\n\n  return (\n    <Form onFinish={onSubmitComment}>\n      <Form.Item style={{ position: \"relative\", margin: 0 }}>\n        <Input.TextArea value={commentText} onChange={onChangeCommentText} />\n        <Button type=\"primary\" htmlType=\"submit\" loading={addCommentLoading}>\n          삐약\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n\nCommentForm.propTypes = {\n  post: PropTypes.object.isRequired,\n};\n\nexport default CommentForm;\n"]},"metadata":{},"sourceType":"module"}