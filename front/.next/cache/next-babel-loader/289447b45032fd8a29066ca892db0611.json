{"ast":null,"code":"var _jsxFileName = \"/Users/songi/Documents/nodebird/front/components/PostCard.js\";\nvar __jsx = React.createElement;\n\n/* eslint-disable react/jsx-wrap-multilines */\nimport React, { useState, useCallback } from \"react\";\nimport { Card, Popover, Button, Avatar, List, Comment } from \"antd\";\nimport { RetweetOutlined, HeartOutlined, MessageOutlined, EllipsisOutlined, SmileTwoTone } from \"@ant-design/icons\";\nimport ButtonGroup from \"antd/lib/button/button-group\";\nimport PropTypes from \"prop-types\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport PostImages from \"./PostImages\";\nimport CommentForm from \"./CommentForm\";\nimport PostCardContent from \"./PostCardContent\";\nimport FollowButton from \"./FollowButton\";\nimport { REMOVE_POST_REQUEST } from \"../reducers/post\";\n\nconst PostCard = ({\n  post\n}) => {\n  const dispatch = useDispatch();\n  const {\n    removePostLoading\n  } = useSelector(state => state.post);\n  const {\n    me\n  } = useSelector(state => state.user);\n  const id = me === null || me === void 0 ? void 0 : me.id; // new!! optional changin 연산자\n  // const id = useSelector ((state)=>state.user.me?.id);\n\n  const {\n    0: liked,\n    1: setLiked\n  } = useState(false);\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const onToggleLike = useCallback(() => {\n    // console.log(liked);\n    setLiked(prev => !prev); // t->f f->t\n  }, []);\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  }, []);\n  const onRemovePost = useCallback(() => {\n    dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, __jsx(Card, {\n    cover: post.Images[0] && __jsx(PostImages, {\n      images: post.Images,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 34\n      }\n    }),\n    actions: [__jsx(RetweetOutlined, {\n      key: \"retweet\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }\n    }), !liked ? __jsx(HeartOutlined, {\n      key: \"heart\",\n      twoToneColor: \"#eb2f96\",\n      onClick: onToggleLike,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }\n    }) : __jsx(SmileTwoTone, {\n      key: \"heart\",\n      onClick: onToggleLike,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }\n    }), __jsx(MessageOutlined, {\n      key: \"comment\",\n      onClick: onToggleComment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }\n    }), __jsx(Popover, {\n      key: \"more\",\n      content: __jsx(ButtonGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 15\n        }\n      }, id && post.User.id && __jsx(React.Fragment, null, __jsx(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }\n      }, \"\\uC218\\uC815\"), __jsx(Button, {\n        type: \"danger\",\n        onClick: onRemovePost,\n        loading: removePostLoading,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }\n      }, \"\\uC0AD\\uC81C\"))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }\n    }, __jsx(EllipsisOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }\n    }))],\n    extra: id && __jsx(FollowButton, {\n      post: post,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 22\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 19\n      }\n    }, post.User.nickname[0]),\n    title: post.User.nickname // eslint-disable-next-line react/prop-types\n    ,\n    description: __jsx(PostCardContent, {\n      postData: post.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 24\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  })), commentFormOpened && __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, __jsx(CommentForm, {\n    post: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }), __jsx(List, {\n    header: `${post.Comments.length}개의 댓글`,\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments,\n    renderItem: item => __jsx(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 15\n      }\n    }, __jsx(Comment, {\n      author: item.User.nickname,\n      avatar: __jsx(Avatar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 27\n        }\n      }, item.User.nickname[0]),\n      content: item.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    // shape 로 객체 구체화\n    id: PropTypes.number,\n    User: PropTypes.object,\n    contnet: PropTypes.string,\n    createdAt: PropTypes.object,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object)\n  }).isRequired\n};\nexport default PostCard;","map":{"version":3,"sources":["/Users/songi/Documents/nodebird/front/components/PostCard.js"],"names":["React","useState","useCallback","Card","Popover","Button","Avatar","List","Comment","RetweetOutlined","HeartOutlined","MessageOutlined","EllipsisOutlined","SmileTwoTone","ButtonGroup","PropTypes","useSelector","useDispatch","PostImages","CommentForm","PostCardContent","FollowButton","REMOVE_POST_REQUEST","PostCard","post","dispatch","removePostLoading","state","me","user","id","liked","setLiked","commentFormOpened","setCommentFormOpened","onToggleLike","prev","onToggleComment","onRemovePost","type","data","Images","User","nickname","content","Comments","length","item","propTypes","shape","number","object","contnet","string","createdAt","arrayOf","isRequired"],"mappings":"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","sourcesContent":["/* eslint-disable react/jsx-wrap-multilines */\nimport React, { useState, useCallback } from \"react\";\nimport { Card, Popover, Button, Avatar, List, Comment } from \"antd\";\nimport {\n  RetweetOutlined,\n  HeartOutlined,\n  MessageOutlined,\n  EllipsisOutlined,\n  SmileTwoTone,\n} from \"@ant-design/icons\";\nimport ButtonGroup from \"antd/lib/button/button-group\";\nimport PropTypes from \"prop-types\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport PostImages from \"./PostImages\";\nimport CommentForm from \"./CommentForm\";\nimport PostCardContent from \"./PostCardContent\";\nimport FollowButton from \"./FollowButton\";\nimport { REMOVE_POST_REQUEST } from \"../reducers/post\";\n\nconst PostCard = ({ post }) => {\n  const dispatch = useDispatch();\n  const { removePostLoading } = useSelector((state) => state.post);\n  const { me } = useSelector((state) => state.user);\n  const id = me?.id; // new!! optional changin 연산자\n  // const id = useSelector ((state)=>state.user.me?.id);\n\n  const [liked, setLiked] = useState(false);\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\n\n  const onToggleLike = useCallback(() => {\n    // console.log(liked);\n    setLiked((prev) => !prev); // t->f f->t\n  }, []);\n\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened((prev) => !prev);\n  }, []);\n  const onRemovePost = useCallback(() => {\n    dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id,\n    });\n  }, []);\n  return (\n    <div>\n      <Card\n        cover={post.Images[0] && <PostImages images={post.Images} />}\n        actions={[\n          <RetweetOutlined key=\"retweet\" />,\n          !liked ? (\n            <HeartOutlined\n              key=\"heart\"\n              twoToneColor=\"#eb2f96\"\n              onClick={onToggleLike}\n            />\n          ) : (\n            <SmileTwoTone key=\"heart\" onClick={onToggleLike} />\n          ),\n          <MessageOutlined key=\"comment\" onClick={onToggleComment} />,\n          <Popover\n            key=\"more\"\n            content={\n              <ButtonGroup>\n                {id && post.User.id && (\n                  <>\n                    <Button>수정</Button>\n                    <Button\n                      type=\"danger\"\n                      onClick={onRemovePost}\n                      loading={removePostLoading}\n                    >\n                      삭제\n                    </Button>\n                  </>\n                )}\n              </ButtonGroup>\n            }\n          >\n            <EllipsisOutlined />\n          </Popover>,\n        ]}\n        extra={id && <FollowButton post={post} />}\n      >\n        <Card.Meta\n          avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\n          title={post.User.nickname}\n          // eslint-disable-next-line react/prop-types\n          description={<PostCardContent postData={post.content} />}\n        />\n      </Card>\n      {commentFormOpened && (\n        <div>\n          <CommentForm post={post} />\n          <List\n            header={`${post.Comments.length}개의 댓글`}\n            itemLayout=\"horizontal\"\n            dataSource={post.Comments}\n            renderItem={(item) => (\n              <li>\n                <Comment\n                  author={item.User.nickname}\n                  avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\n                  content={item.content}\n                />\n              </li>\n            )}\n          />\n        </div>\n      )}\n      {/* <CommentForm />\n      <Comments /> */}\n    </div>\n  );\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    // shape 로 객체 구체화\n    id: PropTypes.number,\n    User: PropTypes.object,\n    contnet: PropTypes.string,\n    createdAt: PropTypes.object,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object),\n  }).isRequired,\n};\nexport default PostCard;\n"]},"metadata":{},"sourceType":"module"}