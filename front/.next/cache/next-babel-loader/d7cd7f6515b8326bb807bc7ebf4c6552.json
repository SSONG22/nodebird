{"ast":null,"code":"/* eslint-disable no-unused-vars */\nimport { all, takeLatest, put, delay, fork, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, FOLLOW_REQUEST, UNFOLLOW_REQUEST, FOLLOW_FAILURE, FOLLOW_SUCCESS, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE, LOAD_MY_INFO_REQUEST, LOAD_MY_INFO_SUCCESS, LOAD_MY_INFO_FAILURE } from \"../reducers/user\";\n\nfunction loadMyInfoAPI() {\n  return axios.get(\"http://localhost:3065/user\");\n}\n\nfunction* loadMyInfo(action) {\n  console.log(\"로드마이인포~~\");\n\n  try {\n    const result = yield call(loadMyInfoAPI);\n    yield put({\n      type: LOAD_MY_INFO_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    yield put({\n      type: LOAD_MY_INFO_FAILURE,\n      data: error.response.data\n    });\n  }\n}\n\nfunction* watchLoadMyInfo() {\n  yield takeLatest(LOAD_MY_INFO_REQUEST, loadMyInfo);\n}\n\nfunction logInAPI(data) {\n  return axios.post(\"http://localhost:3065/user/login\", data);\n}\n\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.data);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction logOutAPI() {\n  return axios.post(\"http://localhost:3065/user/logout\");\n}\n\nfunction* logOut(action) {\n  try {\n    const result = yield call(logOutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction signUpAPI(data) {\n  console.log(data);\n  return axios.post(\"http://localhost:3065/user\", data);\n}\n\nfunction* signUp(action) {\n  console.log(action.data);\n\n  try {\n    const result = yield call(signUpAPI, action.data);\n    console.log(result.data); // yield delay(1000);\n\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nfunction followAPI(data) {\n  return axios.post(\"api/follow\", data);\n}\n\nfunction* follow(action) {\n  try {\n    // const result = yield call(followAPI, action.data);\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: FOLLOW_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\n\nfunction* unfollow(action) {\n  try {\n    // const result = yield call(unfollowAPI, action.data);\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLoadMyInfo), fork(watchLogIn), fork(watchLogOut), fork(watchSignUp), fork(watchFollow), fork(watchUnfollow)]);\n}","map":{"version":3,"sources":["/Users/songi/Documents/nodebird/front/sagas/user.js"],"names":["all","takeLatest","put","delay","fork","call","axios","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","FOLLOW_REQUEST","UNFOLLOW_REQUEST","FOLLOW_FAILURE","FOLLOW_SUCCESS","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","LOAD_MY_INFO_REQUEST","LOAD_MY_INFO_SUCCESS","LOAD_MY_INFO_FAILURE","loadMyInfoAPI","get","loadMyInfo","action","console","log","result","type","data","error","response","watchLoadMyInfo","logInAPI","post","logIn","err","watchLogIn","logOutAPI","logOut","watchLogOut","signUpAPI","signUp","watchSignUp","followAPI","follow","watchFollow","unfollow","watchUnfollow","userSaga"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\nimport { all, takeLatest, put, delay, fork, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport {\n  LOG_IN_REQUEST,\n  LOG_IN_SUCCESS,\n  LOG_IN_FAILURE,\n  LOG_OUT_REQUEST,\n  LOG_OUT_SUCCESS,\n  LOG_OUT_FAILURE,\n  SIGN_UP_REQUEST,\n  SIGN_UP_SUCCESS,\n  SIGN_UP_FAILURE,\n  FOLLOW_REQUEST,\n  UNFOLLOW_REQUEST,\n  FOLLOW_FAILURE,\n  FOLLOW_SUCCESS,\n  UNFOLLOW_SUCCESS,\n  UNFOLLOW_FAILURE,\n  LOAD_MY_INFO_REQUEST,\n  LOAD_MY_INFO_SUCCESS,\n  LOAD_MY_INFO_FAILURE,\n} from \"../reducers/user\";\n\nfunction loadMyInfoAPI() {\n  return axios.get(\"http://localhost:3065/user\");\n}\n\nfunction* loadMyInfo(action) {\n  console.log(\"로드마이인포~~\");\n  try {\n    const result = yield call(loadMyInfoAPI);\n    yield put({\n      type: LOAD_MY_INFO_SUCCESS,\n      data: result.data,\n    });\n  } catch (error) {\n    yield put({\n      type: LOAD_MY_INFO_FAILURE,\n      data: error.response.data,\n    });\n  }\n}\n\nfunction* watchLoadMyInfo() {\n  yield takeLatest(LOAD_MY_INFO_REQUEST, loadMyInfo);\n}\n\nfunction logInAPI(data) {\n  return axios.post(\"http://localhost:3065/user/login\", data);\n}\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.data);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\nfunction logOutAPI() {\n  return axios.post(\"http://localhost:3065/user/logout\");\n}\nfunction* logOut(action) {\n  try {\n    const result = yield call(logOutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction signUpAPI(data) {\n  console.log(data);\n  return axios.post(\"http://localhost:3065/user\", data);\n}\nfunction* signUp(action) {\n  console.log(action.data);\n  try {\n    const result = yield call(signUpAPI, action.data);\n    console.log(result.data);\n    // yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS,\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\nfunction followAPI(data) {\n  return axios.post(\"api/follow\", data);\n}\nfunction* follow(action) {\n  try {\n    // const result = yield call(followAPI, action.data);\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: FOLLOW_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\nfunction* unfollow(action) {\n  try {\n    // const result = yield call(unfollowAPI, action.data);\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\n\nexport default function* userSaga() {\n  yield all([\n    fork(watchLoadMyInfo),\n    fork(watchLogIn),\n    fork(watchLogOut),\n    fork(watchSignUp),\n    fork(watchFollow),\n    fork(watchUnfollow),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}