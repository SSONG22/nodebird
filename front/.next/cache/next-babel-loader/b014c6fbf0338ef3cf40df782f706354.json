{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-case-declarations */\nimport shortId from \"shortid\";\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: \"체리슈\"\n    },\n    content: \"첫번째 게시글 #해시태그 ##태그당 #ㅎㅇ\",\n    Images: [{\n      id: shortId.generate(),\n      src: \"https://cgeimage.commutil.kr/phpwas/restmb_allidxmake.php?idx=3&simg=2019043021255500507482b2d760618310114012.jpg\"\n    }, {\n      id: shortId.generate(),\n      src: \"http://ph.spotvnews.co.kr/news/photo/202001/338010_421317_1105.jpg\"\n    }, {\n      id: shortId.generate(),\n      src: \"http://ph.spotvnews.co.kr/news/photo/202001/338010_421317_1105.jpg\"\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: \"nero\"\n      },\n      content: \"잘생겼다\"\n    }] //sequelize 와 연관되어 있기 때문에 (다른정보와 합쳐줘서 대문자로 줌)\n\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null\n}; // action //상수로 빼주면 재활용할 수 있다.\n\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const addPost = data => {\n  return {\n    type: ADD_POST_REQUEST,\n    data\n  };\n};\nexport const addComment = data => {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data\n  };\n}; // 동적인 액션이 필요할 때 액션 크리에이터 함수를 쓴다\n\nconst dummyPost = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"chee99\"\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"chee99\"\n  }\n});\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        // mainPosts: [dummyPost, ...state.mainPosts], // 앞에 추가\n        addPostDone: false,\n        addPostLoading: true\n      });\n\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostDone: true,\n        addPostLoading: false,\n        addPostError: null,\n        mainPosts: [dummyPost(action.data), ...state.mainPosts]\n      });\n\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostDone: true,\n        addPostLoading: false,\n        addPostError: action.data\n      });\n\n    case REMOVE_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        removePostDone: false,\n        removePostLoading: true,\n        removePostError: null\n      });\n\n    case REMOVE_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        removePostDone: true,\n        removePostLoading: false,\n        removePostError: null,\n        mainPosts: state.mainPosts.filter(v => v.id === action.data)\n      });\n\n    case REMOVE_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        removePostDone: true,\n        removePostLoading: false,\n        removePostError: action.data\n      });\n\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        // mainPosts: [dummyPost, ...state.mainPosts], // 앞에 추가\n        addCommentDone: false,\n        addCommentLoading: true\n      });\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n\n        const post = _objectSpread({}, state.mainPosts[postIndex]);\n\n        post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        const mainPosts = [...state.mainPosts];\n        mainPosts[postIndex] = post;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          mainPosts,\n          addCommentDone: true,\n          addCommentLoading: false,\n          addCommentError: null\n        });\n      }\n\n    case ADD_COMMENT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentDone: true,\n        addCommentLoading: false,\n        addCommentError: action.data\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/songi/Documents/nodebird/front/reducers/post.js"],"names":["shortId","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","filter","v","postIndex","findIndex","postId","post"],"mappings":"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","sourcesContent":["/* eslint-disable no-case-declarations */\nimport shortId from \"shortid\";\nexport const initialState = {\n  mainPosts: [\n    {\n      id: 1,\n      User: {\n        id: 1,\n        nickname: \"체리슈\",\n      },\n      content: \"첫번째 게시글 #해시태그 ##태그당 #ㅎㅇ\",\n      Images: [\n        {\n          id: shortId.generate(),\n          src:\n            \"https://cgeimage.commutil.kr/phpwas/restmb_allidxmake.php?idx=3&simg=2019043021255500507482b2d760618310114012.jpg\",\n        },\n        {\n          id: shortId.generate(),\n          src:\n            \"http://ph.spotvnews.co.kr/news/photo/202001/338010_421317_1105.jpg\",\n        },\n        {\n          id: shortId.generate(),\n          src:\n            \"http://ph.spotvnews.co.kr/news/photo/202001/338010_421317_1105.jpg\",\n        },\n      ],\n      Comments: [\n        {\n          id: shortId.generate(),\n          User: {\n            id: shortId.generate(),\n            nickname: \"nero\",\n          },\n          content: \"잘생겼다\",\n        },\n      ], //sequelize 와 연관되어 있기 때문에 (다른정보와 합쳐줘서 대문자로 줌)\n    },\n  ],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n};\n// action //상수로 빼주면 재활용할 수 있다.\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\n\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\n\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\n\nexport const addPost = (data) => {\n  return {\n    type: ADD_POST_REQUEST,\n    data,\n  };\n};\nexport const addComment = (data) => {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data,\n  };\n};\n// 동적인 액션이 필요할 때 액션 크리에이터 함수를 쓴다\nconst dummyPost = (data) => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"chee99\",\n  },\n  Images: [],\n  Comments: [],\n});\nconst dummyComment = (data) => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"chee99\",\n  },\n});\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return {\n        ...state,\n        // mainPosts: [dummyPost, ...state.mainPosts], // 앞에 추가\n        addPostDone: false,\n        addPostLoading: true,\n      };\n    case ADD_POST_SUCCESS:\n      return {\n        ...state,\n        addPostDone: true,\n        addPostLoading: false,\n        addPostError: null,\n        mainPosts: [dummyPost(action.data), ...state.mainPosts],\n      };\n    case ADD_POST_FAILURE:\n      return {\n        ...state,\n        addPostDone: true,\n        addPostLoading: false,\n        addPostError: action.data,\n      };\n    case REMOVE_POST_REQUEST:\n      return {\n        ...state,\n        removePostDone: false,\n        removePostLoading: true,\n        removePostError: null,\n      };\n    case REMOVE_POST_SUCCESS:\n      return {\n        ...state,\n        removePostDone: true,\n        removePostLoading: false,\n        removePostError: null,\n        mainPosts: state.mainPosts.filter((v) => v.id === action.data),\n      };\n    case REMOVE_POST_FAILURE:\n      return {\n        ...state,\n        removePostDone: true,\n        removePostLoading: false,\n        removePostError: action.data,\n      };\n    case ADD_COMMENT_REQUEST:\n      return {\n        ...state,\n        // mainPosts: [dummyPost, ...state.mainPosts], // 앞에 추가\n        addCommentDone: false,\n        addCommentLoading: true,\n      };\n\n    case ADD_COMMENT_SUCCESS: {\n      const postIndex = state.mainPosts.findIndex(\n        (v) => v.id === action.data.postId,\n      );\n      const post = { ...state.mainPosts[postIndex] };\n      post.Comments = [dummyComment(action.data.content), ...post.Comments];\n      const mainPosts = [...state.mainPosts];\n      mainPosts[postIndex] = post;\n      return {\n        ...state,\n        mainPosts,\n        addCommentDone: true,\n        addCommentLoading: false,\n        addCommentError: null,\n      };\n    }\n    case ADD_COMMENT_FAILURE:\n      return {\n        ...state,\n        addCommentDone: true,\n        addCommentLoading: false,\n        addCommentError: action.data,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}