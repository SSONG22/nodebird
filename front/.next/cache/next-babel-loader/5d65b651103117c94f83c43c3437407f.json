{"ast":null,"code":"import { all, takeLatest, put, delay, fork } from \"redux-saga/effects\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE } from \"../reducers/post\";\nimport axios from \"axios\";\nimport { ADD_POST_TO_ME, REMOVE_POST_TO_ME } from \"../reducers/user\";\nimport shortid from \"shortid\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action) {\n  console.log(\"addpost\");\n\n  try {\n    yield delay(1000);\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: {\n        id,\n        content: action.data\n      }\n    }); // const result = yield call(addPostAPI, action.data);\n\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction removePostAPI() {\n  return axios.post(\"/api/post\");\n}\n\nfunction* removePost(action) {\n  console.log(\"addpost\");\n\n  try {\n    yield delay(1000);\n    const id = shortid.generate();\n    yield put({\n      type: REMOVE_POST_TO_ME,\n      data: {\n        id,\n        content: action.data\n      }\n    }); // const result = yield call(addPostAPI, action.data);\n\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    yield delay(1000); // const result = yield call(addCommentAPI, action.data);\n\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost)]);\n}","map":{"version":3,"sources":["/Users/songi/Documents/nodebird/front/sagas/post.js"],"names":["all","takeLatest","put","delay","fork","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","axios","ADD_POST_TO_ME","REMOVE_POST_TO_ME","shortid","addPostAPI","data","post","addPost","action","console","log","id","generate","type","content","err","response","watchAddPost","removePostAPI","removePost","watchRemovePost","addCommentAPI","postId","addComment","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import { all, takeLatest, put, delay, fork } from \"redux-saga/effects\";\nimport {\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_COMMENT_FAILURE,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n  REMOVE_POST_FAILURE,\n} from \"../reducers/post\";\nimport axios from \"axios\";\nimport { ADD_POST_TO_ME, REMOVE_POST_TO_ME } from \"../reducers/user\";\nimport shortid from \"shortid\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\nfunction* addPost(action) {\n  console.log(\"addpost\");\n  try {\n    yield delay(1000);\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: {\n        id,\n        content: action.data,\n      },\n    });\n    // const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction removePostAPI() {\n  return axios.post(\"/api/post\");\n}\nfunction* removePost(action) {\n  console.log(\"addpost\");\n  try {\n    yield delay(1000);\n    const id = shortid.generate();\n    yield put({\n      type: REMOVE_POST_TO_ME,\n      data: {\n        id,\n        content: action.data,\n      },\n    });\n    // const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    yield delay(1000);\n    // const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost)]);\n}\n"]},"metadata":{},"sourceType":"module"}