{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: \"ㅈㅔ로초\"\n    },\n    content: \"첫번째 게시글 # 해시태그\",\n    Images: [{\n      src: \"https://www.google.com/url?sa=i&url=http%3A%2F%2Fm.thebigdata.co.kr%2Fview.php%3Fud%3D201904302125372703482b2d7606_23&psig=AOvVaw1CIThkYWDzKcwhN22Jvef6&ust=1593700438925000&source=images&cd=vfe&ved=0CAIQjRxqFwoTCKj0l_airOoCFQAAAAAdAAAAABAI\"\n    }, {\n      src: \"https://www.google.com/url?sa=i&url=http%3A%2F%2Fm.spotvnews.co.kr%2F%3Fmod%3Dnews%26act%3DarticleView%26idxno%3D338010&psig=AOvVaw1CIThkYWDzKcwhN22Jvef6&ust=1593700438925000&source=images&cd=vfe&ved=0CAIQjRxqFwoTCKj0l_airOoCFQAAAAAdAAAAABAN\"\n    }],\n    Comments: [{\n      User: {\n        nickname: \"nero\"\n      },\n      content: \"우와~ \"\n    }] //sequelize 와 연관되어 있기 때문에 (다른정보와 합쳐줘서 대문자로 줌)\n\n  }],\n  imagePaths: [],\n  postAdded: false\n}; //action\n\nconst ADD_POST = \"ADD_POST\"; //상수로 빼주면 재활용할 수 있다.\n\nexport const addPost = {\n  type: ADD_POST\n}; //동적인 액션이 필요할 때 액션 크리에이터 함수를 쓴다\n\nconst dummyPost = {\n  id: 2,\n  content: \"더미\",\n  User: {\n    id: 1,\n    nickname: \"더미\"\n  },\n  Images: [],\n  Comments: []\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [dummyPost, ...state.mainPosts],\n        //앞에 추가\n        postAdded: true\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/songi/Documents/nodebird/front/reducers/post.js"],"names":["initialState","mainPosts","id","User","nickname","content","Images","src","Comments","imagePaths","postAdded","ADD_POST","addPost","type","dummyPost","reducer","state","action"],"mappings":";;;;;;AAAA,OAAO,MAAMA,YAAY,GAAG;AAC1BC,EAAAA,SAAS,EAAE,CACT;AACEC,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,IAAI,EAAE;AACJD,MAAAA,EAAE,EAAE,CADA;AAEJE,MAAAA,QAAQ,EAAE;AAFN,KAFR;AAMEC,IAAAA,OAAO,EAAE,gBANX;AAOEC,IAAAA,MAAM,EAAE,CACN;AACEC,MAAAA,GAAG,EACD;AAFJ,KADM,EAKN;AACEA,MAAAA,GAAG,EACD;AAFJ,KALM,CAPV;AAiBEC,IAAAA,QAAQ,EAAE,CACR;AACEL,MAAAA,IAAI,EAAE;AACJC,QAAAA,QAAQ,EAAE;AADN,OADR;AAIEC,MAAAA,OAAO,EAAE;AAJX,KADQ,CAjBZ,CAwBK;;AAxBL,GADS,CADe;AA6B1BI,EAAAA,UAAU,EAAE,EA7Bc;AA8B1BC,EAAAA,SAAS,EAAE;AA9Be,CAArB,C,CAgCP;;AACA,MAAMC,QAAQ,GAAG,UAAjB,C,CAA6B;;AAE7B,OAAO,MAAMC,OAAO,GAAG;AACrBC,EAAAA,IAAI,EAAEF;AADe,CAAhB,C,CAGP;;AACA,MAAMG,SAAS,GAAG;AAChBZ,EAAAA,EAAE,EAAE,CADY;AAEhBG,EAAAA,OAAO,EAAE,IAFO;AAGhBF,EAAAA,IAAI,EAAE;AACJD,IAAAA,EAAE,EAAE,CADA;AAEJE,IAAAA,QAAQ,EAAE;AAFN,GAHU;AAOhBE,EAAAA,MAAM,EAAE,EAPQ;AAQhBE,EAAAA,QAAQ,EAAE;AARM,CAAlB;;AAWA,MAAMO,OAAO,GAAG,CAACC,KAAK,GAAGhB,YAAT,EAAuBiB,MAAvB,KAAkC;AAChD,UAAQA,MAAM,CAACJ,IAAf;AACE,SAAKF,QAAL;AACE,6CACKK,KADL;AAEEf,QAAAA,SAAS,EAAE,CAACa,SAAD,EAAY,GAAGE,KAAK,CAACf,SAArB,CAFb;AAE8C;AAC5CS,QAAAA,SAAS,EAAE;AAHb;;AAKF;AACE,aAAOM,KAAP;AARJ;AAUD,CAXD;;AAaA,eAAeD,OAAf","sourcesContent":["export const initialState = {\n  mainPosts: [\n    {\n      id: 1,\n      User: {\n        id: 1,\n        nickname: \"ㅈㅔ로초\",\n      },\n      content: \"첫번째 게시글 # 해시태그\",\n      Images: [\n        {\n          src:\n            \"https://www.google.com/url?sa=i&url=http%3A%2F%2Fm.thebigdata.co.kr%2Fview.php%3Fud%3D201904302125372703482b2d7606_23&psig=AOvVaw1CIThkYWDzKcwhN22Jvef6&ust=1593700438925000&source=images&cd=vfe&ved=0CAIQjRxqFwoTCKj0l_airOoCFQAAAAAdAAAAABAI\",\n        },\n        {\n          src:\n            \"https://www.google.com/url?sa=i&url=http%3A%2F%2Fm.spotvnews.co.kr%2F%3Fmod%3Dnews%26act%3DarticleView%26idxno%3D338010&psig=AOvVaw1CIThkYWDzKcwhN22Jvef6&ust=1593700438925000&source=images&cd=vfe&ved=0CAIQjRxqFwoTCKj0l_airOoCFQAAAAAdAAAAABAN\",\n        },\n      ],\n      Comments: [\n        {\n          User: {\n            nickname: \"nero\",\n          },\n          content: \"우와~ \",\n        },\n      ], //sequelize 와 연관되어 있기 때문에 (다른정보와 합쳐줘서 대문자로 줌)\n    },\n  ],\n  imagePaths: [],\n  postAdded: false,\n};\n//action\nconst ADD_POST = \"ADD_POST\"; //상수로 빼주면 재활용할 수 있다.\n\nexport const addPost = {\n  type: ADD_POST,\n};\n//동적인 액션이 필요할 때 액션 크리에이터 함수를 쓴다\nconst dummyPost = {\n  id: 2,\n  content: \"더미\",\n  User: {\n    id: 1,\n    nickname: \"더미\",\n  },\n  Images: [],\n  Comments: [],\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST:\n      return {\n        ...state,\n        mainPosts: [dummyPost, ...state.mainPosts], //앞에 추가\n        postAdded: true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}