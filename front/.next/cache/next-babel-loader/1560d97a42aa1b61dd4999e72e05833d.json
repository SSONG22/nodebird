{"ast":null,"code":"/* eslint-disable no-case-declarations */\nimport shortId from \"shortid\";\nimport produce from \"immer\";\nimport faker from \"faker\";\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePost: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null\n};\nexport const generateDummyPost = number => Array(number).fill().map(() => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image()\n  }],\n  Comments: [{\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n}));\ninitialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10)); // action //상수로 빼주면 재활용할 수 있다.\n\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const addPost = data => {\n  return {\n    type: ADD_POST_REQUEST,\n    data\n  };\n};\nexport const addComment = data => {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data\n  };\n}; // 동적인 액션이 필요할 때 액션 크리에이터 함수를 쓴다\n\nconst dummyPost = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"chee99\"\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"chee99\"\n  }\n}); //이전 상태를 액션을 통해 다음 상태로 만들어내는 함수 (불변성은 지키면서)\n\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case LOAD_POSTS_REQUEST:\n      draft.loadPostsDone = false;\n      draft.loadPostsLoading = true;\n      draft.loadPostsError = null;\n      break;\n\n    case LOAD_POSTS_SUCCESS:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.loadPostsError = null;\n      draft.mainPosts = action.data.concat(draft.mainPosts);\n      break;\n\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.loadPostsError = action.data;\n      break;\n\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.addPostError = null;\n      draft.mainPosts.unshift([dummyPost(action.data), ...state.mainPosts]);\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.addPostError = action.data;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      draft.removePostError = null;\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      draft.removePostError = action.data;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        draft.addCommentError = null;\n        const post = draft.mainPosts.find(v => v.id === action.data.postId);\n        post.Comments.unshift(dummyComment(action.data.content));\n        break;\n      }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentDone = true;\n      draft.addCommentError = action.data;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["/Users/songi/Documents/nodebird/front/reducers/post.js"],"names":["shortId","produce","faker","initialState","mainPosts","imagePaths","hasMorePost","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","sentence","concat","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","unshift","filter","v","post","find","postId"],"mappings":"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","sourcesContent":["/* eslint-disable no-case-declarations */\nimport shortId from \"shortid\";\nimport produce from \"immer\";\nimport faker from \"faker\";\n\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePost: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n};\nexport const generateDummyPost = (number) =>\n  Array(number)\n    .fill()\n    .map(() => ({\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName(),\n      },\n      content: faker.lorem.paragraph(),\n      Images: [\n        {\n          src: faker.image.image(),\n        },\n      ],\n      Comments: [\n        {\n          User: {\n            id: shortId.generate(),\n            nickname: faker.name.findName(),\n          },\n          content: faker.lorem.sentence(),\n        },\n      ],\n    }));\n\ninitialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\n\n// action //상수로 빼주면 재활용할 수 있다.\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\n\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\n\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\n\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\n\nexport const addPost = (data) => {\n  return {\n    type: ADD_POST_REQUEST,\n    data,\n  };\n};\nexport const addComment = (data) => {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data,\n  };\n};\n// 동적인 액션이 필요할 때 액션 크리에이터 함수를 쓴다\nconst dummyPost = (data) => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"chee99\",\n  },\n  Images: [],\n  Comments: [],\n});\nconst dummyComment = (data) => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"chee99\",\n  },\n});\n//이전 상태를 액션을 통해 다음 상태로 만들어내는 함수 (불변성은 지키면서)\nconst reducer = (state = initialState, action) =>\n  produce(state, (draft) => {\n    switch (action.type) {\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsDone = false;\n        draft.loadPostsLoading = true;\n        draft.loadPostsError = null;\n        break;\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.loadPostsError = null;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        break;\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.loadPostsError = action.data;\n        break;\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.addPostError = null;\n        draft.mainPosts.unshift([dummyPost(action.data), ...state.mainPosts]);\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.addPostError = action.data;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.removePostError = null;\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.removePostError = action.data;\n        break;\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS: {\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        draft.addCommentError = null;\n        const post = draft.mainPosts.find((v) => v.id === action.data.postId);\n        post.Comments.unshift(dummyComment(action.data.content));\n        break;\n      }\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        draft.addCommentError = action.data;\n        break;\n      default:\n        break;\n    }\n  });\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}